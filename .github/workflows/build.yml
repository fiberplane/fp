# This workflow will be triggered by a GitHub pull-request.
# It compiles the code to a release binary, create a Docker image containing
# the binary, and uploads the Docker image to our registry using the branch as
# the registry tag.
---
name: Build development image

on:
  pull_request:
    branches: ["*"]

env:
  CARGO_TERM_COLOR: always
  DISABLE_VERSION_CHECK: true

jobs:
  build:
    runs-on: ubuntu-latest-8-cores
    steps:
      - uses: actions/checkout@v4

      - uses: de-vri-es/setup-git-credentials@v2
        with:
          credentials: "https://fiberplanebot:${{ secrets.PRIVATE_GITHUB_TOKEN }}@github.com/"

      - uses: Swatinem/rust-cache@v2

      - name: add rust components
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Check format
        run: cargo fmt -- --check

      - name: Build binary and tests
        run: cargo build --bins --tests --release

      - name: Clippy
        uses: giraffate/clippy-action@v1
        with:
          filter_mode: nofilter
          fail_on_error: true
          clippy_flags: --all-features --release

      - name: Run tests
        run: cargo test --release --all

      # Clap has specific debug asserts when generating completions
      - name: Run Completion generation test
        run: cargo test generating_completions --bin fp

      - name: Generate manifest
        run: target/release/fp version -o json > manifest.json

      - name: Upload fp
        uses: actions/upload-artifact@v4
        with:
          name: fp
          path: target/release/fp
          if-no-files-found: error
          retention-days: 1

      - name: Upload manifest
        uses: actions/upload-artifact@v4
        with:
          name: manifest.json
          path: manifest.json
          if-no-files-found: error
          retention-days: 1
