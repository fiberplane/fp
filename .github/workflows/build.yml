# This workflow will be triggered by a GitHub pull-request.
# It compiles the code to a release binary, create a Docker image containing
# the binary, and uploads the Docker image to our registry using the branch as
# the registry tag.
---
name: Build development image

on:
  pull_request:
    branches: ["*"]

env:
  CARGO_TERM_COLOR: always
  DISABLE_VERSION_CHECK: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: setup-git-credentials
        uses: fusion-engineering/setup-git-credentials@v2.0.6
        with:
          credentials: "https://fiberplanebot:${{ secrets.PRIVATE_GITHUB_TOKEN }}@github.com/"

      - name: setup sccache
        env:
          SCCACHE_BUCKET: "fiberplane-cache"
          SCCACHE_REGION: "us-east-1"
          SCCACHE_S3_KEY_PREFIX: "sccache/fp"
          AWS_ACCESS_KEY_ID: "${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}"
          AWS_SECRET_ACCESS_KEY: "${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}"
        run: |
          SCCACHE_VERSION="v0.3.0"
          cd `mktemp -d`

          # Install sccache
          curl -o sccache.tar.gz -L https://github.com/mozilla/sccache/releases/download/${SCCACHE_VERSION}/sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl.tar.gz
          tar zvxf sccache.tar.gz
          sudo mv sccache-${SCCACHE_VERSION}-x86_64-unknown-linux-musl/sccache /usr/bin/sccache

          # Setup cargo config
          echo '[build]\nrustc-wrapper = "/usr/bin/sccache"' > "$HOME/.cargo/config.toml"

          # Start server
          /usr/bin/sccache --start-server

      # - uses: actions/cache@v2
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       target/
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: add rust components
        run: |
          rustup component add clippy
          rustup component add rustfmt

      - name: Check format
        run: cargo fmt -- --check

      - name: Build binary and tests
        run: cargo build --bins --tests --release

      - name: Lint code
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --release

      - name: Run tests
        run: cargo test --release

      - name: Generate manifest
        run: target/release/fp version -o json > manifest.json

      - name: Upload fp
        uses: actions/upload-artifact@v2
        with:
          name: fp
          path: target/release/fp
          if-no-files-found: error
          retention-days: 1

      - name: Upload manifest
        uses: actions/upload-artifact@v2
        with:
          name: manifest.json
          path: manifest.json
          if-no-files-found: error
          retention-days: 1

      - name: sccache stats
        run: /usr/bin/sccache --show-stats
