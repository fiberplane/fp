on:
  release:
    types:
      - created
  workflow_dispatch:

name: Publish binaries

env:
  DISABLE_VERSION_CHECK: true

jobs:
  validate-release:
    name: Validate release (${{ github.event.release.tag_name }})
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: validate version
        if: github.event_name == 'release'
        run: |
          # Extract the version from the Cargo.toml
          FP_VERSION=$(cat "Cargo.toml" | grep '^version' | awk '{ split($0,version,"=") ; gsub(/[\ \"]/, "", version[2]) ; print version[2] }')
          if [ "v${FP_VERSION}" != "${{ github.event.release.tag_name }}" ]; then
            echo "::error file=Cargo.toml::Version set in Cargo.toml (v${FP_VERSION}) does not match release version (${{ github.event.release.tag_name }})"
            exit 1
          fi

  build-upload-assets:
    name: Build assets for ${{ matrix.build }} (${{ github.event.release.tag_name }})
    needs: validate-release
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux_x86_64, macos_x86_64, macos_aarch64]
        include:
          - build: linux_x86_64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos_x86_64
            os: macOS-11
            rust: stable
            target: x86_64-apple-darwin
          - build: macos_aarch64
            os: macOS-11
            rust: stable
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: setup-git-credentials
        uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: "https://fiberplanebot:${{ secrets.PRIVATE_GITHUB_TOKEN }}@github.com/"

      - name: cargo fetch
        run: cargo fetch --target ${{ matrix.target }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux_x86_64' || matrix.build == 'macos_x86_64'
        run: strip "target/${{ matrix.target }}/release/fp"

      - name: Prepare artifact
        run: |
          mkdir -p /tmp/artifact/
          cp "target/${{ matrix.target }}/release/fp" /tmp/artifact/

      # We are not able to run the ARM based MacOS binary, since this is running
      # on a x86_64 MacOS machine.
      - name: Release version information
        if: matrix.build != 'macos_aarch64'
        run: |
          target/${{ matrix.target }}/release/fp version -o verbose
          target/${{ matrix.target }}/release/fp version -o json > /tmp/artifact/manifest.json

      # - name: Strip release binary (arm)
      #   if: matrix.build == 'macos_aarch64'
      #   run: |
      #     docker run --rm -v \
      #       "$PWD/target:/target:Z" \
      #       rustembedded/cross:arm-unknown-linux-gnueabihf \
      #       arm-linux-gnueabihf-strip \
      #       /target/arm-unknown-linux-gnueabihf/release/rg

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: fp-${{ matrix.target }}
          path: /tmp/artifact/
          if-no-files-found: error
          retention-days: 1

  publish-artifacts:
    name: Publish artifacts to S3 GitHub build artifact (${{ github.event.release.tag_name }})
    runs-on: ubuntu-latest
    needs: build-upload-assets
    steps:
      - uses: actions/download-artifact@v2
        with:
          path: artifacts

      - name: Create SHA256 sums for each artifact
        run: |
          for dir in artifacts/*/; do
            pushd "$dir"
            sha256sum * > checksum.sha256
            popd
          done

      - name: Create version file
        if: github.event_name == 'release'
        run: echo "${{ github.event.release.tag_name }}" | cut -c2- > artifacts/version

      - name: Upload to GitHub artifacts
        uses: actions/upload-artifact@v2
        with:
          name: fp-final
          path: artifacts
          if-no-files-found: error
          retention-days: 1

      - name: Configure AWS Credentials
        if: github.event_name == 'release'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEPLOY_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEPLOY_AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Sync fp ${{ github.event.release.tag_name }} to S3
        if: github.event_name == 'release'
        run: |
          aws s3 cp \
            --acl public-read \
            --delete \
            artifact/ \
            s3://fp.dev/fp/${{ github.event.release.tag_name }}/

          aws s3 cp \
            --acl public-read \
            --delete \
            artifact/ \
            s3://fp.dev/fp/latest

      - name: Invalidate latest path on CloudFront
        if: github.event_name == 'release'
        run: |
          aws cloudfront create-invalidation \
            --distribution-id "${{ secrets.CF_BUILDS_ID }}" \
            --paths '/fp/latest*'
