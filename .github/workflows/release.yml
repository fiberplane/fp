on:
  release:
    types:
      - created
  workflow_dispatch:

jobs:
  build-upload-assets:
    name: build-upload-assets
    runs-on: ${{ matrix.os }}
    env:
      CARGO: cargo
      TARGET_FLAGS: ""
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build: [linux_x86_64, macos_x86_64, macos_aarch64]
        include:
          - build: linux_x86_64
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos_x86_64
            os: macOS-11
            rust: stable
            target: x86_64-apple-darwin
          - build: macos_aarch64
            os: macOS-11
            rust: stable
            target: aarch64-apple-darwin

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: setup-git-credentials
        uses: fusion-engineering/setup-git-credentials@v2
        with:
          credentials: "https://fiberplanebot:${{ secrets.PRIVATE_GITHUB_TOKEN }}@github.com/"

      - name: cargo fetch
        run: cargo fetch --target ${{ matrix.target }}

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Use Cross
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV

      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"

      - name: Build release binary
        run: ${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}

      - name: Strip release binary (linux and macos)
        if: matrix.build == 'linux_x86_64' || matrix.build == 'macos_x86_64'
        run: strip "target/${{ matrix.target }}/release/fp"

      # - name: Strip release binary (arm)
      #   if: matrix.build == 'macos_aarch64'
      #   run: |
      #     docker run --rm -v \
      #       "$PWD/target:/target:Z" \
      #       rustembedded/cross:arm-unknown-linux-gnueabihf \
      #       arm-linux-gnueabihf-strip \
      #       /target/arm-unknown-linux-gnueabihf/release/rg

      - name: Upload release archive
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/${{ matrix.target }}/release/fp
          asset_name: fp-${{ matrix.build }}
          asset_content_type: application/octet-stream

      - name: Upload build artifact
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v2
        with:
          name: fp-${{ matrix.build }}
          path: target/${{ matrix.target }}/release/fp
          if-no-files-found: error
          retention-days: 1
