---
openapi: "3.0.2"
info:
  title: Fiberplane API
  version: "1.0"
servers:
  - url: https://fiberplane.com/
    description: Production servers
  - url: https://{env}.fiberplane.io/
    description: Non-production servers
    variables:
      env:
        default: dev
        description: Environment
components:
  securitySchemes:
    userToken:
      type: http
      scheme: bearer
  schemas:
    newNotebook:
      type: object
      required:
        - title
        - timeRange
        - cells
      properties:
        title:
          type: string
        timeRange:
          $ref: "#/components/schemas/timeRange"
        cells:
          type: array
          items:
            $ref: "#/components/schemas/cell"
        dataSources:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/notebookDataSource"
    cell:
      oneOf:
        - $ref: "#/components/schemas/checkboxCell"
        - $ref: "#/components/schemas/codeCell"
        - $ref: "#/components/schemas/dividerCell"
        - $ref: "#/components/schemas/graphCell"
        - $ref: "#/components/schemas/headingCell"
        - $ref: "#/components/schemas/listItemCell"
        - $ref: "#/components/schemas/prometheusCell"
        - $ref: "#/components/schemas/tableCell"
        - $ref: "#/components/schemas/textCell"
        - $ref: "#/components/schemas/imageCell"
      discriminator:
        propertyName: type
        mapping:
          checkbox: "#/components/schemas/checkboxCell"
          code: "#/components/schemas/codeCell"
          divider: "#/components/schemas/dividerCell"
          graph: "#/components/schemas/graphCell"
          heading: "#/components/schemas/headingCell"
          list_item: "#/components/schemas/listItemCell"
          prometheus: "#/components/schemas/prometheusCell"
          table: "#/components/schemas/tableCell"
          text: "#/components/schemas/textCell"
          image: "#/components/schemas/imageCell"
    cellType:
      type: string
      enum:
        - checkbox
        - code
        - divider
        - graph
        - heading
        - list_item
        - prometheus
        - table
        - text
        - image
    checkboxCell:
      type: object
      required:
        - type
        - id
        - checked
        - content
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        checked:
          type: boolean
        content:
          type: string
        level:
          type: number
        readOnly:
          type: boolean
    codeCell:
      type: object
      required:
        - type
        - id
        - content
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        content:
          type: string
        readOnly:
          type: boolean
        syntax:
          type: string
    dividerCell:
      type: object
      required:
        - type
        - id
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        readOnly:
          type: boolean
    graphCell:
      type: object
      required:
        - type
        - id
        - graphType
        - stackingType
        - sourceIds
        - title
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        graphType:
          type: string
          enum:
            - bar
            - line
        stackingType:
          type: string
          enum:
            - none
            - stacked
            - percentage
        readOnly:
          type: boolean
        sourceIds:
          type: array
          items:
            type: string
        timeRange:
          $ref: "#/components/schemas/timeRange"
        title:
          type: string
        data:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/series"
    headingCell:
      type: object
      required:
        - type
        - id
        - headingType
        - content
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        headingType:
          type: string
          enum:
            - h1
            - h2
            - h3
        content:
          type: string
        readOnly:
          type: boolean
    listItemCell:
      type: object
      required:
        - type
        - id
        - listType
        - content
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        listType:
          type: string
          enum:
            - ordered
            - unordered
        content:
          type: string
        level:
          type: number
        readOnly:
          type: boolean
        startNumber:
          type: number
    prometheusCell:
      type: object
      required:
        - type
        - id
        - content
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        content:
          type: string
        readOnly:
          type: boolean
    tableCell:
      type: object
      required:
        - type
        - id
        - sourceIds
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        readOnly:
          type: boolean
        sourceIds:
          type: array
          items:
            type: string
        data:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/instant"
    textCell:
      type: object
      required:
        - type
        - id
        - content
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        content:
          type: string
        readOnly:
          type: boolean
    imageCell:
      type: object
      required:
        - type
        - id
      properties:
        type:
          $ref: "#/components/schemas/cellType"
        id:
          type: string
        fileId:
          type: string
        progress:
          type: number
          format: float
        readOnly:
          type: boolean
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
        preview:
          type: string
    notebook:
      type: object
      required:
        - id
        - revision
        - title
        - cells
        - createdAt
        - createdBy
        - timeRange
        - updatedAt
      properties:
        id:
          type: string
        revision:
          type: integer
        title:
          type: string
        cells:
          type: array
          items:
            $ref: "#/components/schemas/cell"
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/createdBy"
        dataSources:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/notebookDataSource"
        readOnly:
          type: boolean
        timeRange:
          $ref: "#/components/schemas/timeRange"
        updatedAt:
          type: string
          format: date-time
        visibility:
          $ref: "#/components/schemas/notebookVisibility"
    notebookPatch:
      type: object
      properties:
        visibility:
          $ref: "#/components/schemas/notebookVisibility"
    notebookSummary:
      type: object
      required:
        - id
        - title
        - createdAt
        - createdBy
        - updatedAt
      properties:
        id:
          type: string
        title:
          type: string
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/createdBy"
        updatedAt:
          type: string
          format: date-time
        visibility:
          $ref: "#/components/schemas/notebookVisibility"
    notebookVisibility:
      type: string
      enum:
        - public
        - private
    timeRange:
      type: object
      required:
        - from
        - to
      properties:
        from:
          type: number
          format: float
        to:
          type: number
          format: float
    instant:
      type: object
      required:
        - metric
        - point
        - pointType
      properties:
        metric:
          $ref: "#/components/schemas/metric"
        point:
          $ref: "#/components/schemas/point"
        pointType:
          $ref: "#/components/schemas/pointType"
    series:
      type: object
      required:
        - metric
        - points
        - pointType
        - visible
      properties:
        metric:
          $ref: "#/components/schemas/metric"
        points:
          type: array
          items:
            $ref: "#/components/schemas/point"
        pointType:
          $ref: "#/components/schemas/pointType"
        visible:
          type: boolean
    metric:
      type: object
      required:
        - name
        - labels
      properties:
        name:
          type: string
        labels:
          type: object
          additionalProperties:
            type: string
    point:
      type: object
      required:
        - timestamp
        - value
      properties:
        timestamp:
          type: number
          format: float
        value:
          type: number
          format: float
    pointType:
      deprecated: true
      type: string
      enum:
        - f64
        - string
    notebookDataSource:
      oneOf:
        - $ref: "#/components/schemas/inlineDataSource"
        - $ref: "#/components/schemas/orgDataSource"
      discriminator:
        propertyName: type
        mapping:
          inline: "#/components/schemas/inlineDataSource"
          organization: "#/components/schemas/orgDataSource"
    inlineDataSource:
      type: object
      required:
        - "dataSource"
      properties:
        dataSource:
          $ref: "#/components/schemas/dataSource"
    newOrgDataSource:
      type: object
      required:
        - "name"
        - "defaultDataSource"
        - "dataSource"
      properties:
        name:
          type: string
        defaultDataSource:
          type: boolean
        dataSource:
          $ref: "#/components/schemas/dataSource"
    orgDataSource:
      type: object
      required:
        - "id"
        - "name"
        - "defaultDataSource"
        - "dataSource"
      properties:
        id:
          type: string
        name:
          type: string
        defaultDataSource:
          type: boolean
        dataSource:
          $ref: "#/components/schemas/dataSource"
    dataSource:
      oneOf:
        - $ref: "#/components/schemas/prometheusDataSource"
        - $ref: "#/components/schemas/proxyDataSource"
      discriminator:
        propertyName: type
        mapping:
          prometheus: "#/components/schemas/prometheusDataSource"
          proxy: "#/components/schemas/proxyDataSource"
    dataSourceType:
      type: string
      enum:
        - prometheus
        - proxy
    prometheusDataSource:
      type: object
      required:
        - "type"
        - "url"
      properties:
        type:
          $ref: "#/components/schemas/dataSourceType"
        url:
          type: string
    proxyDataSource:
      type: object
      required:
        - "type"
        - "proxyId"
        - "dataSourceName"
      properties:
        type:
          $ref: "#/components/schemas/dataSourceType"
        proxyId:
          type: string
        dataSourceName:
          type: string
    fileSummary:
      type: object
      required:
        - fileId
      properties:
        fileId:
          type: string
    uploadData:
      description: "upload file payload"
      type: object
      required:
        - file
      properties:
        file:
          type: string
          format: binary
    ProfileUploadData:
      description: "upload file payload"
      type: object
      required:
        - picture
      properties:
        picture:
          type: string
          format: binary
    user:
      type: object
      required:
        - "id"
        - "name"
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
    newPinnedNotebook:
      type: object
      required:
        - notebookId
      properties:
        notebookId:
          type: string
    newProxy:
      type: object
      required:
        - name
      properties:
        name:
          type: string
    proxySummary:
      type: object
      required:
        - id
        - status
        - name
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: "#/components/schemas/proxyConnectionStatus"
    proxy:
      type: object
      required:
        - id
        - status
        - name
        - dataSources
      properties:
        id:
          type: string
        status:
          $ref: "#/components/schemas/proxyConnectionStatus"
        name:
          type: string
        token:
          description: this will only be set when creating a new proxy
          type: string
        dataSources:
          description: data-sources associated with this proxy
          type: array
          items:
            $ref: "#/components/schemas/dataSourceSummary"
    proxyConnectionStatus:
      type: string
      enum:
        - connected
        - disconnected
    queryType:
      oneOf:
        - $ref: "#/components/schemas/seriesQuery"
        - $ref: "#/components/schemas/instantQuery"
      discriminator:
        propertyName: type
        mapping:
          series: "#/components/schemas/seriesQuery"
          instant: "#/components/schemas/instantQuery"
    seriesQuery:
      type: object
      required:
        - type
        - timeRange
      properties:
        type:
          type: string
        timeRange:
          $ref: "#/components/schemas/timeRange"
    instantQuery:
      type: object
      required:
        - type
        - time
      properties:
        type:
          type: string
        time:
          type: number
          format: float
    dataSourceSummary:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          type: string
    dataSourceAndProxySummary:
      type: object
      required:
        - name
        - type
        - proxy
      properties:
        name:
          type: string
        type:
          type: string
        proxy:
          $ref: "#/components/schemas/proxySummary"
    trigger:
      type: object
      required:
        - id
        - templateBody
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
        templateBody:
          type: string
        templateUrl:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    newTriggerWithTemplateUrl:
      type: object
      required:
        - templateUrl
      properties:
        templateUrl:
          type: string
          format: uri
    newTriggerWithTemplateBody:
      type: object
      required:
        - templateBody
      properties:
        templateBody:
          type: string
    triggerWebHookRequest:
      type: object
    triggerWebHookResponse:
      type: object
      required:
        - notebookUrl
      properties:
        notebookUrl:
          type: string
          format: uri
    createdBy:
      type: object
      required:
        - name
        - type
      properties:
        name:
          type: string
        type:
          $ref: "#/components/schemas/userType"
        proxy:
          $ref: "#/components/schemas/proxySummary"
    userType:
      type: string
      enum:
        - organization
        - individual
# Most routes require authentication. The ones
# that do not will specify "security: []"
security:
  - userToken: []
paths:
  /api/notebooks:
    get:
      operationId: notebook_list
      description: "List all accessible notebooks"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/notebookSummary"
    post:
      operationId: notebook_create
      description: "Create a new notebook"
      requestBody:
        description: new notebook
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newNotebook"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notebook"
  /api/notebooks/{id}:
    parameters:
      - name: id
        in: path
        description: ID of the notebook
        required: true
        schema:
          type: string
    get:
      operationId: get_notebook
      description: "Fetch a single notebook"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/notebook"
          description: OK
    delete:
      operationId: delete_notebook
      responses:
        "200":
          description: OK
    patch:
      operationId: patch_notebook
      description: "Modifies individual properties of a single notebook"
      requestBody:
        description: updated properties
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notebookPatch"
      responses:
        "200":
          description: OK
  /api/datasources:
    post:
      operationId: org_data_source_create
      description: "Create an organization data-source"
      requestBody:
        description: new data-source
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newOrgDataSource"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/orgDataSource"
  /api/files/{notebookId}:
    parameters:
      - name: notebookId
        in: path
        description: ID of the notebook
        required: true
        schema:
          type: string
    post:
      operationId: file_upload
      description: "upload a file"
      requestBody:
        description: a file
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/uploadData"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/fileSummary"
  /api/files/{notebookId}/{fileId}:
    parameters:
      - name: notebookId
        in: path
        description: ID of the notebook
        required: true
        schema:
          type: string
      - name: fileId
        in: path
        description: ID of the file
        required: true
        schema:
          type: string
    delete:
      operationId: delete_file
      description: "Delete a file"
      responses:
        "200":
          description: OK
    get:
      operationId: get_file
      description: "Get a file"
      # images are accessible to anonymous users for public notebooks
      security: []
      responses:
        "200":
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
  /api/profile:
    get:
      operationId: get_profile
      description: "Fetch the profile of the authenticated user"
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
          description: OK
  /api/profile/picture:
    get:
      operationId: get_profile_picture
      description: "Retrieve profile image"
      # can be unauthenticated
      security: []
      responses:
        "200":
          description: OK
          content:
            image/*:
              schema:
                type: string
                format: binary
    post:
      operationId: update_profile_picture
      description: "Upload profile image"
      requestBody:
        description: a file
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ProfileUploadData"
      responses:
        "200":
          description: OK
  /api/pinnednotebooks:
    get:
      operationId: pinned_notebook_list
      description: "List all pinned notebooks"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/notebookSummary"
    post:
      operationId: pinned_notebook_create
      description: "Create a new notebook"
      requestBody:
        description: new notebook
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newPinnedNotebook"
      responses:
        "200":
          description: OK
  /api/pinnednotebooks/{notebookId}:
    parameters:
      - name: notebookId
        in: path
        description: ID of the notebook
        required: true
        schema:
          type: string
    delete:
      operationId: pinned_notebook_delete
      responses:
        "200":
          description: OK
  /api/proxies:
    get:
      operationId: proxy_list
      description: "List all proxies"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/proxySummary"
    post:
      operationId: proxy_create
      description: "Create a new proxy"
      requestBody:
        description: new proxy
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/newProxy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proxy"
  /api/proxies/datasources:
    get:
      operationId: proxy_data_sources_list
      description: Get all of the data sources for all proxies that belong to the same organization as the user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/dataSourceAndProxySummary"
  /api/proxies/{proxyId}:
    parameters:
      - name: proxyId
        in: path
        description: ID of the proxy
        required: true
        schema:
          type: string
    delete:
      operationId: proxy_delete
      responses:
        "200":
          description: OK
    get:
      operationId: proxy_get
      description: "Retrieve a single proxy"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proxy"
  /api/proxies/{proxyId}/relay:
    parameters:
      - name: proxyId
        in: path
        description: ID of the proxy
        required: true
        schema:
          type: string
      - name: dataSourceName
        in: query
        description: Name of the data source
        required: true
        schema:
          type: string
    post:
      operationId: proxy_relay
      description: "Relay a query to a remote proxy"
      responses:
        "200":
          description: OK
  /api/oidc/authorize/google:
    parameters:
      - name: cli_redirect_port
        in: query
        description: The port on localhost to redirect to after the OAuth flow is successful. Used for authorizing the CLI
        required: false
        schema:
          type: integer
      - name: redirect
        in: query
        description: Relative path to redirect to after the OAuth flow is successful. Used for deep linking into the Studio
        required: false
        schema:
          type: string
    get:
      operationId: oidc_authorize_google
      description: Start the Google OAuth flow to authenticate a user
      responses:
        "307":
          description: Redirect to Google
  /api/logout:
    post:
      operationId: logout
      description: Log out of Fiberplane
      responses:
        "200":
          description: OK
  /api/triggers:
    get:
      operationId: trigger_list
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/trigger"
    post:
      operationId: trigger_create
      description: "Create a new trigger"
      requestBody:
        description: Template URL or body
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/newTriggerWithTemplateUrl"
                - $ref: "#/components/schemas/newTriggerWithTemplateBody"
  /api/triggers/{triggerId}:
    parameters:
      - name: triggerId
        in: path
        description: ID of the trigger
        required: true
        schema:
          type: string
    get:
      operationId: trigger_get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trigger"
    delete:
      operationId: trigger_delete
      responses:
        "200":
          description: OK
  /api/triggers/{triggerId}/webhook:
    parameters:
      - name: triggerId
        in: path
        description: ID of the trigger
        required: true
        schema:
          type: string
    post:
      operationId: trigger_webhook
      description: "Invoke a trigger to create a notebook from the associated template"
      requestBody:
        description: Parameters to pass to the template
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/triggerWebHookRequest"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/triggerWebHookResponse"
